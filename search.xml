<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Robotics:Computational Motion Planning:Study Notes - Week 1</title>
      <link href="/2023/07/18/Robotics:%20Computational%20Motion%20Planning/week%201/"/>
      <url>/2023/07/18/Robotics:%20Computational%20Motion%20Planning/week%201/</url>
      
        <content type="html"><![CDATA[<h3 id="Grassfire-Algrithm"><a href="#Grassfire-Algrithm" class="headerlink" title="Grassfire Algrithm"></a>Grassfire Algrithm</h3><h3 id="Dijkstra-Algorithm"><a href="#Dijkstra-Algorithm" class="headerlink" title="Dijkstra Algorithm"></a>Dijkstra Algorithm</h3><h3 id="A-Algorithm"><a href="#A-Algorithm" class="headerlink" title="A* Algorithm"></a>A* Algorithm</h3><h3 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h3><ol><li>If you use the Grassfire or breadth first search procedure to plan a path through a grid from a node A to a node B, then you use the same procedure to plan a path from node B to node A, will the two paths have the same length?<br><strong>Yes</strong><br>2.If you use the Grassfire or breadth first search procedure to plan a path through a grid from a node A to a node B, then you use the same procedure to plan a path from node B to node A, are the two paths guaranteed to be the same except in opposite directions?<br><strong>No</strong><br>3.If you use the grassfire algorithm to plan a path through a series of grids with increasing dimension, 2 dimensional, 3 dimensional, 4 dimensional etc. The amount of computational effort required increases<br>with the dimension of the problem.<br><strong>exponentially</strong><br>4.Generally speaking, which procedure would take less time to find a solution to a typical path planning problem on a discrete grid or graph?<br><strong>A</strong>*</li></ol><h3 id="Assignment-Dijkstra-Algorithm"><a href="#Assignment-Dijkstra-Algorithm" class="headerlink" title="Assignment: Dijkstra Algorithm"></a>Assignment: Dijkstra Algorithm</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% ********************************************************************* </span></span><br><span class="line"><span class="comment">% YOUR CODE BETWEEN THESE LINES OF STARS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% Visit each neighbor of the current node and update the map, distances</span></span><br><span class="line"><span class="comment">% and parent tables appropriately.</span></span><br><span class="line">offsets = [<span class="number">-1</span> <span class="number">0</span>; <span class="number">1</span> <span class="number">0</span>; <span class="number">0</span> <span class="number">-1</span>; <span class="number">0</span> <span class="number">1</span>]; <span class="comment">% Left, Right, Top, Bottom</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span>:<span class="built_in">size</span>(offsets, <span class="number">1</span>)</span><br><span class="line">    neighbor = [<span class="built_in">i</span>, <span class="built_in">j</span>] + offsets(k,:);</span><br><span class="line">    <span class="keyword">if</span> any(neighbor &lt; <span class="number">1</span>) || any(neighbor &gt; [nrows, ncols])</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    nextNode = <span class="built_in">sub2ind</span>(<span class="built_in">size</span>(map), neighbor(<span class="number">1</span>), neighbor(<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">if</span> ((map(nextNode) ~= <span class="number">2</span> &amp;&amp; map(nextNode) ~= <span class="number">3</span> &amp;&amp; map(nextNode) ~= <span class="number">5</span> &amp;&amp; min_dist + <span class="number">1</span> &lt; distanceFromStart(nextNode)))</span><br><span class="line">        map(nextNode) = <span class="number">4</span>;</span><br><span class="line">        distanceFromStart(nextNode) = min_dist + <span class="number">1</span>;</span><br><span class="line">        parent(nextNode) = current;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">numExpanded = numExpanded + <span class="number">1</span>;</span><br><span class="line"><span class="comment">%*********************************************************************</span></span><br></pre></td></tr></table></figure><h3 id="Assignment-Dijkstra-Algorithm-1"><a href="#Assignment-Dijkstra-Algorithm-1" class="headerlink" title="Assignment: Dijkstra Algorithm"></a>Assignment: Dijkstra Algorithm</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% *********************************************************************</span></span><br><span class="line">    <span class="comment">% ALL YOUR CODE BETWEEN THESE LINES OF STARS</span></span><br><span class="line">    <span class="comment">% Visit all of the neighbors around the current node and update the</span></span><br><span class="line">    <span class="comment">% entries in the map, f, g and parent arrays</span></span><br><span class="line">    <span class="comment">%</span></span><br><span class="line">    <span class="comment">% Visit each neighbor of the current node and update the map, distances, and parent tables appropriately.</span></span><br><span class="line">    offsets = [<span class="number">-1</span> <span class="number">0</span>; <span class="number">1</span> <span class="number">0</span>; <span class="number">0</span> <span class="number">-1</span>; <span class="number">0</span> <span class="number">1</span>]; <span class="comment">% Left, Right, Top, Bottom</span></span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>:<span class="built_in">size</span>(offsets, <span class="number">1</span>)</span><br><span class="line">        neighbor = [<span class="built_in">i</span>, <span class="built_in">j</span>] + offsets(k,:);</span><br><span class="line">        <span class="keyword">if</span> any(neighbor &lt; <span class="number">1</span>) || any(neighbor &gt; [nrows, ncols])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        nextNode = <span class="built_in">sub2ind</span>(<span class="built_in">size</span>(map), neighbor(<span class="number">1</span>), neighbor(<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">if</span> map(nextNode) ~= <span class="number">2</span> &amp;&amp; map(nextNode) ~= <span class="number">3</span> &amp;&amp; map(nextNode) ~= <span class="number">5</span></span><br><span class="line">            tentative_g = g(current) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> tentative_g &lt; g(nextNode)</span><br><span class="line">                parent(nextNode) = current;</span><br><span class="line">                g(nextNode) = tentative_g;</span><br><span class="line">                f(nextNode) = tentative_g + H(nextNode);</span><br><span class="line">                map(nextNode) = <span class="number">4</span>; <span class="comment">% mark neighbor as on list</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    numExpanded = numExpanded + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Robotics </tag>
            
            <tag> Motion Planning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Getting started with ROS2</title>
      <link href="/2023/07/13/ROS/getting-started/"/>
      <url>/2023/07/13/ROS/getting-started/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This note contains a detail summary of setting up ROS2 and the basic definitions of the ROS2 concepts. Goal of this is to summarise the basic usage of these concepts.</p></blockquote><p>ROS Distro and the version</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ROS_VERSION=2</span><br><span class="line">ROS_DISTRO=humble</span><br><span class="line">OS=Ubuntu 22.04</span><br></pre></td></tr></table></figure><h2 id="Setting-up-the-environment"><a href="#Setting-up-the-environment" class="headerlink" title="Setting up the environment"></a>Setting up the environment</h2><h3 id="Add-the-sourcing-to-shell-startup-script-to-access-ROS2-commands"><a href="#Add-the-sourcing-to-shell-startup-script-to-access-ROS2-commands" class="headerlink" title="Add the sourcing to shell startup script to access ROS2 commands"></a>Add the sourcing to shell startup script to access ROS2 commands</h3><p>Sourcing your ROS 2 installation workspace in the terminal makes ROS 2’s packages available for you to use in that terminal.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/humble/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="Creating-a-workspace"><a href="#Creating-a-workspace" class="headerlink" title="Creating a workspace"></a>Creating a workspace</h3><p>A workspace is a directory containing ROS 2 packages.</p><h4 id="Creating-a-directory-for-the-workspace"><a href="#Creating-a-directory-for-the-workspace" class="headerlink" title="Creating a directory for the workspace"></a>Creating a directory for the workspace</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/ros2_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/ros2_ws</span><br></pre></td></tr></table></figure><h4 id="Build-the-workspace"><a href="#Build-the-workspace" class="headerlink" title="Build the workspace"></a>Build the workspace</h4><p> In the root of the project(i.e. <code>~/ros2_ws</code>), run </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colcon build</span><br></pre></td></tr></table></figure><p> Using build command with the tag <code>--symlink-install</code> allows the installed files to be changed by changing the files in the source space (e.g. Python files or other non-compiled resources) for faster iteration.</p><p> After the build we should see directory structure as below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── build</span><br><span class="line">├── install</span><br><span class="line">├── log</span><br><span class="line">└── src</span><br></pre></td></tr></table></figure><h4 id="Source-the-environment"><a href="#Source-the-environment" class="headerlink" title="Source the environment"></a>Source the environment</h4><p>colcon will bash&#x2F;bat files in the <code>install</code> directory to help set up the environment. These files will add all of the required elements to your path and library paths as well as provide any bash or shell commands exported by packages.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source ~/ros2_ws/install/setup.bash &quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="Setup-colcon-tab-completion"><a href="#Setup-colcon-tab-completion" class="headerlink" title="Setup colcon tab completion"></a>Setup <code>colcon</code> tab completion</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="Creating-a-package"><a href="#Creating-a-package" class="headerlink" title="Creating a package"></a>Creating a package</h3><p>A package is an organizational unit for your ROS 2 code. Package creation in ROS 2 uses ament as its build system and colcon as its build tool. A single workspace can contain as many packages as you want, each in their own folder.</p><p>Make sure you are in the <code>src</code> folder.</p><p>For Python</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 pkg create &lt;package_name&gt; --build-type ament_python --dependencies rclpy </span><br></pre></td></tr></table></figure><p>For C++</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 pkg create &lt;package_name&gt; --build-type ament_cmake --dependencies rclcpp</span><br></pre></td></tr></table></figure><h3 id="Building-a-package"><a href="#Building-a-package" class="headerlink" title="Building a package"></a>Building a package</h3><p>You can build many packages at once by running colcon build in the workspace root.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/ros2_ws</span><br><span class="line">colcon build</span><br></pre></td></tr></table></figure><p>source the workspace bash file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>To build only a particular package</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colcon build --packages-select &lt;package_name&gt;</span><br></pre></td></tr></table></figure><p>Package contents after building. Inside <code>ros2_ws/src/&lt;package_name&gt;</code>, you will see the files and folders that ros2 pkg create automatically generated.</p><p>For Python</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_package  package.xml  resource  setup.cfg  setup.py  <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>For C++</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMakeLists.txt  include  package.xml  src</span><br></pre></td></tr></table></figure><h2 id="Nodes-in-ROS2"><a href="#Nodes-in-ROS2" class="headerlink" title="Nodes in ROS2"></a>Nodes in ROS2</h2><p>Each node in ROS should be responsible for a single, modular purpose, e.g. controlling the wheel motors or publishing the sensor data from a laser range-finder. Each node can send and receive data from other nodes via topics, services, actions, or parameters.</p><p>A full robotic system is comprised of many nodes working in concert. In ROS 2, a single executable (C++ program, Python program, etc.) can contain one or more nodes.</p><center><img src="https://docs.ros.org/en/humble/_images/Nodes-TopicandService.gif"  width="80%" height="80%"></center> <p><a href="https://docs.ros.org/en/humble/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.html#id3"><em>source</em></a></p><p>From now on I will be using python and <code>&lt;package_name&gt;</code> as <code>my_package</code>.</p><p>Go to the folder inside your package which names as same as your package.(i.e.<code>my_package</code>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>  ros2_ws/src/my_package/my_package</span><br></pre></td></tr></table></figure><h3 id="create-a-node-which-logs-a-message"><a href="#create-a-node-which-logs-a-message" class="headerlink" title="create a node which logs a message"></a>create a node which logs a message</h3><p>Create a python file for you node and make it executable</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> my_first_node.py</span><br><span class="line"><span class="built_in">chmod</span> +x my_first_node.py</span><br></pre></td></tr></table></figure><p>Write the first node as below.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3 </span></span><br><span class="line"><span class="keyword">import</span> rclpy</span><br><span class="line"><span class="keyword">from</span> rclpy.node <span class="keyword">import</span> Node</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyNode</span>(<span class="title class_ inherited__">Node</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;first_node&quot;</span>) <span class="comment"># node name that is used when we run the node in the graph</span></span><br><span class="line">        self.get_logger().info(<span class="string">&quot;My first node message&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args=<span class="literal">None</span></span>):</span><br><span class="line">    rclpy.init(args=args) <span class="comment"># initialize ros2 communication</span></span><br><span class="line">    node = MyNode() <span class="comment"># creating the node object</span></span><br><span class="line">    rclpy.spin(node=node) <span class="comment"># when you spin a node it is gonna be kept alive until you kills it.</span></span><br><span class="line">    rclpy.shutdown()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="Install-the-node"><a href="#Install-the-node" class="headerlink" title="Install the node"></a>Install the node</h3><p>Navigate to the <code>setup.py</code> in your package. Add a <code>console script</code> in the <code>entry_points</code>. make the executable name <code>test_node</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">entry_points=&#123;</span><br><span class="line">        <span class="string">&#x27;console_scripts&#x27;</span>: [</span><br><span class="line">            <span class="string">&quot;test_node = my_package.my_first_node:main&quot;</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="Build-the-package-–-instructions-above"><a href="#Build-the-package-–-instructions-above" class="headerlink" title="Build the package – instructions above"></a>Build the package – instructions above</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/ros2_ws</span><br><span class="line">colcon build</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="Run-the-node"><a href="#Run-the-node" class="headerlink" title="Run the node"></a>Run the node</h3><p>The command <code>ros2 run</code> launches an executable from a package. <code>ros2 run &lt;package_name&gt; &lt;executable_name&gt;</code></p><p>Run the below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run my_package test_node</span><br></pre></td></tr></table></figure><p>It will output something like this<br><code>[INFO] [1689263569.773487669] [first_node]: My first node message</code></p><h3 id="Add-a-timer-and-a-callback-inside-the-node"><a href="#Add-a-timer-and-a-callback-inside-the-node" class="headerlink" title="Add a timer and a callback inside the node"></a>Add a timer and a callback inside the node</h3><p>We are going to log a message at every second.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3 </span></span><br><span class="line"><span class="keyword">import</span> rclpy</span><br><span class="line"><span class="keyword">from</span> rclpy.node <span class="keyword">import</span> Node</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyNode</span>(<span class="title class_ inherited__">Node</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;first_node&quot;</span>) </span><br><span class="line">        self.counter_ = <span class="number">0</span></span><br><span class="line">        self.create_timer(<span class="number">1.0</span>, self.timer_callback)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">timer_callback</span>(<span class="params">self</span>):</span><br><span class="line">        self.get_logger().info(<span class="string">&quot;Hello &quot;</span> + <span class="built_in">str</span>(self.counter_))</span><br><span class="line">        self.counter_ += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args=<span class="literal">None</span></span>):</span><br><span class="line">    rclpy.init(args=args)</span><br><span class="line">    node = MyNode() </span><br><span class="line">    rclpy.spin(node=node)</span><br><span class="line">    rclpy.shutdown()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="ros2-node-list"><a href="#ros2-node-list" class="headerlink" title="ros2 node list"></a>ros2 node list</h3><p><code>ros2 node list</code> will show you the names of all running nodes. </p><p>this will output something like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/first_node</span><br></pre></td></tr></table></figure><h3 id="ros2-node-info"><a href="#ros2-node-info" class="headerlink" title="ros2 node info"></a>ros2 node info</h3><p><code>ros2 node info /first_node</code>returns a list of subscribers, publishers, services, and actions.</p><p>The output should look like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/first_node</span><br><span class="line">  Subscribers:</span><br><span class="line"></span><br><span class="line">  Publishers:</span><br><span class="line">    /parameter_events: rcl_interfaces/msg/ParameterEvent</span><br><span class="line">    /rosout: rcl_interfaces/msg/Log</span><br><span class="line">  Service Servers:</span><br><span class="line">    /first_node/describe_parameters: rcl_interfaces/srv/DescribeParameters</span><br><span class="line">    /first_node/get_parameter_types: rcl_interfaces/srv/GetParameterTypes</span><br><span class="line">    /first_node/get_parameters: rcl_interfaces/srv/GetParameters</span><br><span class="line">    /first_node/list_parameters: rcl_interfaces/srv/ListParameters</span><br><span class="line">    /first_node/set_parameters: rcl_interfaces/srv/SetParameters</span><br><span class="line">    /first_node/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically</span><br><span class="line">  Service Clients:</span><br><span class="line"></span><br><span class="line">  Action Servers:</span><br><span class="line"></span><br><span class="line">  Action Clients:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Robotics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robotics </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Self Attention in Transformer Neural Networks</title>
      <link href="/2023/07/04/Deep%20learning/Self%20attention/"/>
      <url>/2023/07/04/Deep%20learning/Self%20attention/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This will be in three sections</p><ul><li>Motivation for attention</li><li>Transformer architecture</li><li>Self attention with code and maths</li></ul></blockquote><blockquote><p>Notes are a summary of the explanation given by <a href="https://www.youtube.com/embed/QCJQG4DuHT0">CodeEmporium</a></p></blockquote><h2 id="Motivation-for-attention"><a href="#Motivation-for-attention" class="headerlink" title="Motivation for attention"></a>Motivation for attention</h2><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/QCJQG4DuHT0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> Deep learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Robotics:Perception:Study Notes - Week 1</title>
      <link href="/2023/07/03/robotics:perception/week%201/"/>
      <url>/2023/07/03/robotics:perception/week%201/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This course is offered by coursera. You can audit the course for free. Check it out <a href="https://www.coursera.org/learn/robotics-perception/">here</a></p></blockquote><h2 id="Perspective-projection"><a href="#Perspective-projection" class="headerlink" title="Perspective projection"></a>Perspective projection</h2><ul><li><strong>Vanishing point</strong> - The vanishing point is where parallel lines receding away from you would converge on the horizon line.</li><li><strong>Horizon</strong> - The plane on the ground if we were receding to infinity, if there is no building behind this we can see the whole earth infront us. This is where the ground plane will intersect at infinity.</li></ul><center><img src="https://github.com/naaz97/naaz97.github.io/blob/main/source/_posts/robotics:perception/image-1.png?raw=true"  width="30%" height="30%"></center><h3 id="The-projective-plane"><a href="#The-projective-plane" class="headerlink" title="The projective plane"></a>The projective plane</h3><center><img src="https://github.com/naaz97/naaz97.github.io/blob/main/source/_posts/robotics:perception/image-homo-coordinates.png?raw=true"  width="50%" height="30%"></center><ul><li>Point <ul><li>Homogeneous coordinates represents coordinates in 2 dimensions in 3 dimensional vector.</li></ul></li></ul><center><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>⟶</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}x \\y  \end{bmatrix} \longrightarrow\begin{bmatrix}x \\y \\1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⟶</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></center><ul><li><p>Line</p><ul><li><p>A line is a plane of rays through the origin</p>  <center>  <img src="https://github.com/naaz97/naaz97.github.io/blob/main/source/_posts/robotics:perception/image-2.png?raw=true"  width="50%" height="30%">  </center></li><li><p>All rays from the origin satisfy: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>+</mo><mi>c</mi><mi>z</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} 0 &amp; = ax + by + cz \end{aligned} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.5000000000000002em;vertical-align:-0.5000000000000002em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1em;"><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5000000000000002em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1em;"><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5000000000000002em;"><span></span></span></span></span></span></span></span></span></span></span></p></li></ul>   <center>      <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\begin{bmatrix}a&amp;b&amp;c\end{bmatrix} \begin{bmatrix}x \\y \\z\end{bmatrix} = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>  </center>  <center>  <img src="https://github.com/naaz97/naaz97.github.io/blob/main/source/_posts/robotics:perception/image-3.png?raw=true"  width="50%" height="30%">  </center>  <center>  <img src="https://github.com/naaz97/naaz97.github.io/blob/main/source/_posts/robotics:perception/image-4.png?raw=true"  width="50%" height="30%">  </center></li><li><p>Projective line from two points</p>  <center>  <img src="https://github.com/naaz97/naaz97.github.io/blob/main/source/_posts/robotics:perception/image-5.png?raw=true"  width="50%" height="30%">  </center></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Robotics </tag>
            
            <tag> Perception </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Website Template</title>
      <link href="/2022/07/03/page-template/"/>
      <url>/2022/07/03/page-template/</url>
      
        <content type="html"><![CDATA[<p>Access the template code from <a href="https://www.github.com/probberechts/hexo-theme-cactus">here</a><br>Credit should go to <a href="https://www.github.com/probberechts">probberechts</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
